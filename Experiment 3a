#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>  // For wait()
#include<stdlib.h>    // For exit()
#define MAX 20

void quicksort(int a[], int, int);
void merge(int a[], int, int, int);
void divide(int a[], int, int);

int main() {
    pid_t pid;
    int a[MAX], n, i;

    printf("\n\tEnter the no. of elements: ");
    scanf("%d", &n);
    printf("\n\tEnter the elements: \n");
    for(i = 0; i < n; i++) {
        printf("\t");
        scanf("%d", &a[i]);
    }

    pid = fork();

    if(pid < 0) {
        printf("Error While creating a new process.....!!!!!!\n");
    }
    else if(pid == 0) {
        // Child Process
        sleep(1);  // To make it orphan when parent exits first
        printf("\n\t==============Child process started=============\n");
        printf("\n\tI am a child process with pid=%d and ppid=%d\n", getpid(), getppid());
        quicksort(a, 0, n-1);
        printf("\n\n\tSorted array by quick sort:\n\t");
        for(i = 0; i < n; i++)
            printf("%d\t", a[i]);
        printf("\n\t==============Child process terminated=============\n");
    }
    else {
        // Parent Process
        printf("\n\t==============Parent process started=============\n");
        printf("\tI am a parent process with pid=%d\n", getpid());
        divide(a, 0, n-1);
        printf("\n\n\tSorted array by merge sort:\n\t");
        for(i = 0; i < n; i++)
            printf("%d\t", a[i]);
        printf("\n\t==============Parent process terminated=============\n");
        exit(0);  // Exit early to create an orphan child
    }

    execl("/bin/ps", "ps", NULL);
    return 0;
}

// ----------------- QUICK SORT -------------------
void quicksort(int a[MAX], int first, int last) {
    int pivot, j, i, temp;
    if(first < last) {
        pivot = first;
        i = first;
        j = last;

        while(i < j) {
            while(a[i] <= a[pivot] && i < last)
                i++;
            while(a[j] > a[pivot])
                j--;
            if(i < j) {
                temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }

        temp = a[pivot];
        a[pivot] = a[j];
        a[j] = temp;

        quicksort(a, first, j-1);
        quicksort(a, j+1, last);
    }
}

// ----------------- MERGE SORT -------------------
void divide(int a[MAX], int low, int high) {
    if(low < high) {
        int mid = (low + high) / 2;
        divide(a, low, mid);
        divide(a, mid + 1, high);
        merge(a, low, mid, high);
    }
}

void merge(int a[MAX], int low, int mid, int high) {
    int i, j, k;
    int m = mid - low + 1;
    int n = high - mid;
    int first_half[m], second_half[n];

    for(i = 0; i < m; i++)
        first_half[i] = a[low + i];
    for(i = 0; i < n; i++)
        second_half[i] = a[mid + 1 + i];

    i = j = 0;
    k = low;

    while(i < m && j < n) {
        if(first_half[i] < second_half[j])
            a[k++] = first_half[i++];
        else
            a[k++] = second_half[j++];
    }

    while(i < m)
        a[k++] = first_half[i++];
    while(j < n)
        a[k++] = second_half[j++];
}
